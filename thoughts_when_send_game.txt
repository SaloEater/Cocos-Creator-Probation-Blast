Как мне объяснили в сообществе, у Cocos'а встроенный вебпак, поэтому я его не реализовывал.
И, честно говоря, я бы предпочел взять у опытного специалиста 1-2 часа времени вместо того, это, на мой взгляд,
будет намного быстрее, по моим прикидкам раз в 10.

-2) Переход сцен иногда не работает. Это проблема самого движка, по наводке разработчиков отправил багрепорт им на форум

-1) Пункта про "атомарные коммиты" не придерживался. Хоть и понятно что это единственный способ увидеть эволюцию проекта
, но опыт работы с современными vcs-сервисами оставил плохую привычку о бесполезности девовских коммитов

0) Тесты запускаются только когда в сцене Game активируется нода TestsLogComponent через Cocos Creator

1) Работы с контейнером выглядит так неказисто из-за того что видимо нужно или писать свой контейнер, или, условно,
внедрять его в движок

2) Для супер тайла не стал делать интерфейсы потому что бойлерплейт уже порядком наскучил. Да, их можно и нужно сделать,
но я считаю, в тестовом достаточно показать что у человека есть понимание и опыт их использования

3) Тесты писал по принципу - покрывай что не сработало с 1 раза. Было определенное различие между сложностью логики
и проблемами с Cocos'ом из-за чего я впринице пока не решился писать тесты на компоненты. Хотя навсикду это не очень
ложно, только долго, т.к. понадобилась бы новая настроеннаяя сцена.
Плюс, получилось сделать Unit-тесты, что, я подозреваю, было главным требованием

4) Весь некрасивый код в основном появился из-за былых проблем с Cocos'ом связанных с загрузкой компонент из-за чего
было тяжело правильно работать с контейнером. За две недели у меня закончились ресурсы для распутывания созданного BoM.
Примеры такого кода:
- классы с initDI методами

5) Поля в основном без модификатором доступа, т.к. на мой взгляд ими можно и пренебречь, когда разработчики знают, что в
поля нельзя писать

6) В реальных условия нужно сделать задержку перед следующими моментами:
    - шафл
    - проигрыш
    - победа

7) Анимация для бустер-телепорта выглядела бы уместно

Ошибки:
- Надо было сразу садиться на эвенты, иначе в середине разработки становится тяжело их внедрять
- CellVisual можно поделить на компоненты или сделать наследственность поглубже
- В ячейках супер тайла нельзя было брать из контейнера что угодно, нужно было выносить это в команды, чтобы ячейка
знала только об интерфейсе доменной команды, но это опять бойлерплейт
- В сервисах-наследниках SimilarCellsService конечно нельзя делать состояния, но пришлось бы проводить еще один
рефакторинг
К тому же сервисы нарушают L принцип солида
- Сейчас думаю, действительно стоило сразу делать кортеж колонка-строка. Было бы немного удобнее взаимодействовать с
ячейками
- Конечно, обязательно нужны тесты на эвенты, т.к. это самая непрозрачная часть продукта. Это была одна из причин почему
я не вспоминал про них(эвенты) в начале разработки
- GameStateInterface не должен быть импортирован в MixUnplayableFieldEventHandler, но эта ошибка возникла из-за позднего
подключения эвентов что привело к проблеме ответственности эвентов